import requests
import json
import time
import hashlib
from datetime import datetime
import logging

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%H:%M:%S'
)
logger = logging.getLogger(__name__)

class NextcloudTalkBot:
    def __init__(self, server_url, username, app_password, debug=True):
        self.server_url = server_url.rstrip('/')
        self.username = username
        self.app_password = app_password
        self.debug = debug
        self.session = requests.Session()
        self.session.auth = (username, app_password)
        self.session.headers.update({
            'OCS-APIRequest': 'true',
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        })
        self.rooms = {}
        self.last_message_id = {}
        
        logger.info(f"ü§ñ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞: {self.server_url}")
        logger.info(f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {self.username}")
        
    def log_json_response(self, operation, response):
        """–õ–æ–≥—É–≤–∞–Ω–Ω—è JSON –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó"""
        if self.debug and response.status_code == 200:
            try:
                data = response.json()
                logger.info(f"üìã {operation} - JSON Response:")
                print(json.dumps(data, indent=2, ensure_ascii=False))
                logger.info("=" * 50)
            except:
                logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ JSON –¥–ª—è {operation}")
    
    def get_rooms(self):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫—ñ–º–Ω–∞—Ç"""
        url = f"{self.server_url}/ocs/v2.php/apps/spreed/api/v4/room"
        logger.info(f"üîç –ó–∞–ø–∏—Ç —Å–ø–∏—Å–∫—É –∫—ñ–º–Ω–∞—Ç: GET {url}")
        
        try:
            response = self.session.get(url)
            logger.info(f"üì° HTTP Status: {response.status_code}")
            
            if response.status_code == 200:
                self.log_json_response("GET_ROOMS", response)
                
                data = response.json()
                rooms = {}
                for room in data['ocs']['data']:
                    rooms[room['token']] = {
                        'name': room['displayName'],
                        'id': room['id']
                    }
                self.rooms = rooms
                
                logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∫—ñ–º–Ω–∞—Ç: {len(rooms)}")
                for token, room_info in rooms.items():
                    logger.info(f"  üìÅ {room_info['name']} (ID: {room_info['id']}, Token: {token[:8]}...)")
                
                return rooms
            else:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–º–Ω–∞—Ç: {response.status_code}")
                logger.error(f"Response: {response.text}")
                return {}
        except Exception as e:
            logger.error(f"üí• –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {e}")
            return {}
    
    def find_room_by_name(self, room_name):
        """–ó–Ω–∞–π—Ç–∏ –∫—ñ–º–Ω–∞—Ç—É –∑–∞ –Ω–∞–∑–≤–æ—é"""
        logger.info(f"üîé –ü–æ—à—É–∫ –∫—ñ–º–Ω–∞—Ç–∏: '{room_name}'")
        for token, room_info in self.rooms.items():
            if room_info['name'].lower() == room_name.lower():
                logger.info(f"‚úÖ –ö—ñ–º–Ω–∞—Ç—É –∑–Ω–∞–π–¥–µ–Ω–æ: {room_info['name']} (Token: {token[:8]}...)")
                return token
        logger.warning(f"‚ùå –ö—ñ–º–Ω–∞—Ç—É '{room_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return None
    
    def get_messages(self, room_token, limit=50):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫—ñ–º–Ω–∞—Ç–∏"""
        url = f"{self.server_url}/ocs/v2.php/apps/spreed/api/v1/chat/{room_token}"
        params = {
            'lookIntoFuture': 0,
            'limit': limit,
            'includeLastKnown': 1
        }
        
        logger.debug(f"üì® –ó–∞–ø–∏—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: GET {url}")
        logger.debug(f"Parameters: {params}")
        
        try:
            response = self.session.get(url, params=params)
            
            if response.status_code == 200:
                if self.debug:
                    self.log_json_response("GET_MESSAGES", response)
                
                data = response.json()
                messages = data['ocs']['data']
                logger.info(f"üì¨ –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {len(messages)}")
                return messages
            else:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {response.status_code}")
                return []
        except Exception as e:
            logger.error(f"üí• –ü–æ–º–∏–ª–∫–∞: {e}")
            return []
    
    def send_message(self, room_token, message):
        """–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫—ñ–º–Ω–∞—Ç—É"""
        url = f"{self.server_url}/ocs/v2.php/apps/spreed/api/v1/chat/{room_token}"
        reference_id = hashlib.sha256(f"{message}{time.time()}".encode()).hexdigest()
        data = {
            'message': message,
            'referenceId': reference_id
        }
        
        logger.info(f"üì§ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {message}")
        logger.debug(f"POST {url}")
        logger.debug(f"Data: {json.dumps(data, ensure_ascii=False)}")
        
        try:
            response = self.session.post(url, json=data)
            logger.info(f"üì° HTTP Status: {response.status_code}")
            
            if response.status_code == 201:
                if self.debug:
                    self.log_json_response("SEND_MESSAGE", response)
                logger.info(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
                return True
            else:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è: {response.status_code}")
                logger.error(f"Response: {response.text}")
                return False
        except Exception as e:
            logger.error(f"üí• –ü–æ–º–∏–ª–∫–∞: {e}")
            return False
    
    def process_command(self, message):
        """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥"""
        message = message.strip()
        logger.info(f"‚öôÔ∏è –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏: {message}")
        
        if message == '/help':
            response = """ü§ñ **–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:**
‚Ä¢ `/help` - –ø–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –º–µ–Ω—é
‚Ä¢ `/time` - –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å
‚Ä¢ `/echo [—Ç–µ–∫—Å—Ç]` - –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ —Ç–µ–∫—Å—Ç
‚Ä¢ `/hello` - –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
‚Ä¢ `/info` - —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞
‚Ä¢ `/debug on/off` - —É–≤—ñ–º–∫–Ω—É—Ç–∏/–≤–∏–º–∫–Ω—É—Ç–∏ debug —Ä–µ–∂–∏–º"""
            logger.info("üìã –ö–æ–º–∞–Ω–¥–∞ /help - –ø–æ–∫–∞–∑—É—é —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")
            return response
        
        elif message == '/time':
            current_time = datetime.now().strftime("%H:%M:%S %d.%m.%Y")
            response = f"üïê **–ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å:** {current_time}"
            logger.info(f"‚è∞ –ö–æ–º–∞–Ω–¥–∞ /time - {current_time}")
            return response
        
        elif message.startswith('/echo '):
            text_to_echo = message[6:]  # –í–∏–¥–∞–ª—è—î–º–æ '/echo '
            if text_to_echo:
                response = f"üì¢ **Echo:** {text_to_echo}"
                logger.info(f"üîä –ö–æ–º–∞–Ω–¥–∞ /echo - –ø–æ–≤—Ç–æ—Ä—é—é: {text_to_echo}")
                return response
            else:
                logger.warning("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ /echo –±–µ–∑ —Ç–µ–∫—Å—Ç—É")
                return "‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: `/echo [–≤–∞—à —Ç–µ–∫—Å—Ç]`"
        
        elif message == '/hello':
            response = "üëã **–ü—Ä–∏–≤—ñ—Ç!** –Ø —Ç–µ—Å—Ç–æ–≤–∏–π –±–æ—Ç –¥–ª—è Nextcloud Talk. –í–≤–µ–¥—ñ—Ç—å `/help` –¥–ª—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥."
            logger.info("üëã –ö–æ–º–∞–Ω–¥–∞ /hello - –≤—ñ—Ç–∞—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
            return response
        
        elif message == '/info':
            response = f"""‚ÑπÔ∏è **–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞:**
‚Ä¢ –í–µ—Ä—Å—ñ—è: 1.0 (Test)
‚Ä¢ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Nextcloud Talk
‚Ä¢ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∏–π ‚úÖ
‚Ä¢ –°–µ—Ä–≤–µ—Ä: {self.server_url}
‚Ä¢ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {self.username}
‚Ä¢ Debug —Ä–µ–∂–∏–º: {'–£–≤—ñ–º–∫–Ω–µ–Ω–æ' if self.debug else '–í–∏–º–∫–Ω–µ–Ω–æ'}
‚Ä¢ –°—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è API"""
            logger.info("‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥–∞ /info - –ø–æ–∫–∞–∑—É—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–æ—Ç–∞")
            return response
        
        elif message == '/debug on':
            self.debug = True
            logger.info("üîß Debug —Ä–µ–∂–∏–º —É–≤—ñ–º–∫–Ω–µ–Ω–æ")
            return "üîß **Debug —Ä–µ–∂–∏–º —É–≤—ñ–º–∫–Ω–µ–Ω–æ**"
        
        elif message == '/debug off':
            self.debug = False
            logger.info("üîß Debug —Ä–µ–∂–∏–º –≤–∏–º–∫–Ω–µ–Ω–æ")
            return "üîß **Debug —Ä–µ–∂–∏–º –≤–∏–º–∫–Ω–µ–Ω–æ**"
        
        else:
            logger.warning(f"‚ùì –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: {message}")
            return None  # –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞
    
    def monitor_room(self, room_name):
        """–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∫—ñ–º–Ω–∞—Ç–∏ —Ç–∞ –æ–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥"""
        logger.info("=" * 60)
        logger.info("üöÄ –ü–û–ß–ê–¢–û–ö –ú–û–ù–Ü–¢–û–†–ò–ù–ì–£ –ö–Ü–ú–ù–ê–¢–ò")
        logger.info("=" * 60)
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –∫—ñ–º–Ω–∞—Ç
        rooms = self.get_rooms()
        if not rooms:
            logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫—ñ–º–Ω–∞—Ç. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏.")
            return
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ—Ç—Ä—ñ–±–Ω—É –∫—ñ–º–Ω–∞—Ç—É
        room_token = self.find_room_by_name(room_name)
        if not room_token:
            logger.error(f"‚ùå –ö—ñ–º–Ω–∞—Ç—É '{room_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏.")
            return
        
        logger.info("=" * 60)
        logger.info(f"‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –∫—ñ–º–Ω–∞—Ç–∏: {room_name}")
        logger.info(f"üéØ Token –∫—ñ–º–Ω–∞—Ç–∏: {room_token[:8]}...")
        logger.info("üí¨ –û—á—ñ–∫—É—é –∫–æ–º–∞–Ω–¥–∏... (Ctrl+C –¥–ª—è –∑—É–ø–∏–Ω–∫–∏)")
        logger.info("=" * 60)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        initial_messages = self.get_messages(room_token, limit=5)
        if initial_messages:
            self.last_message_id[room_token] = initial_messages[0]['id']
            logger.info(f"üìå –û—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ID: {self.last_message_id[room_token]}")
        
        try:
            while True:
                logger.debug("üîÑ –ü–µ—Ä–µ–≤—ñ—Ä—è—é –Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
                
                # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                messages = self.get_messages(room_token, limit=10)
                
                # –û–±—Ä–æ–±–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ –Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                new_messages = []
                if room_token in self.last_message_id:
                    for msg in messages:
                        if msg['id'] > self.last_message_id[room_token]:
                            new_messages.append(msg)
                else:
                    new_messages = messages[:1] if messages else []
                
                # –û–Ω–æ–≤–ª—é—î–º–æ ID –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                if messages:
                    self.last_message_id[room_token] = messages[0]['id']
                
                # –û–±—Ä–æ–±–ª—è—î–º–æ –Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                for message in reversed(new_messages):  # –û–±—Ä–æ–±–ª—è—î–º–æ –≤—ñ–¥ —Å—Ç–∞—Ä—à–∏—Ö –¥–æ –Ω–æ–≤—ñ—à–∏—Ö
                    if message['actorType'] == 'users' and message['actorId'] != self.username:
                        msg_text = message['message']
                        actor = message['actorDisplayName']
                        timestamp = message['timestamp']
                        
                        logger.info("=" * 40)
                        logger.info(f"üì® –ù–û–í–ï –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø")
                        logger.info(f"üë§ –í—ñ–¥: {actor} ({message['actorId']})")
                        logger.info(f"‚è∞ –ß–∞—Å: {datetime.fromtimestamp(timestamp).strftime('%H:%M:%S')}")
                        logger.info(f"üí¨ –¢–µ–∫—Å—Ç: {msg_text}")
                        logger.info("=" * 40)
                        
                        # –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–º–∞–Ω–¥—É
                        if msg_text.startswith('/'):
                            response = self.process_command(msg_text)
                            if response:
                                self.send_message(room_token, response)
                            else:
                                error_msg = f"‚ùì –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: `{msg_text}`. –í–≤–µ–¥—ñ—Ç—å `/help` –¥–ª—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥."
                                logger.warning(f"–ù–∞–¥—Å–∏–ª–∞—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É")
                                self.send_message(room_token, error_msg)
                        else:
                            logger.info("‚ÑπÔ∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ —î –∫–æ–º–∞–Ω–¥–æ—é (–Ω–µ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ '/')")
                
                # –ó–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é
                time.sleep(3)
                
        except KeyboardInterrupt:
            logger.info("\n" + "=" * 60)
            logger.info("üõë –ë–û–¢ –ó–£–ü–ò–ù–ï–ù–û –ö–û–†–ò–°–¢–£–í–ê–ß–ï–ú")
            logger.info("=" * 60)
        except Exception as e:
            logger.error(f"\nüí• –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: {e}")
            logger.error("=" * 60)

def main():
    print("ü§ñ Nextcloud Talk Bot v1.0 (Test)")
    print("=" * 50)
    
    SERVER_URL = "https://cloud.tascombank.ua"
    USERNAME = input("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à username: ").strip()
    APP_PASSWORD = input("–í–≤–µ–¥—ñ—Ç—å App Password: ").strip()
    ROOM_NAME = input("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫—ñ–º–Ω–∞—Ç–∏ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 'test-bot'): ").strip() or "test-bot"
    
    print(f"\nüîó –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ {SERVER_URL}")
    print(f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {USERNAME}")
    print(f"üè† –ö—ñ–º–Ω–∞—Ç–∞: {ROOM_NAME}")
    print(f"üîß Debug —Ä–µ–∂–∏–º: –£–≤—ñ–º–∫–Ω–µ–Ω–æ")
    print("=" * 50)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    bot = NextcloudTalkBot(SERVER_URL, USERNAME, APP_PASSWORD, debug=True)
    bot.monitor_room(ROOM_NAME)

if __name__ == "__main__":
    main()