import requests
import json
import time
import hashlib
from datetime import datetime
from bs4 import BeautifulSoup

class NextcloudTalkBot:
    def __init__(self, server_url, username, app_password):
        self.server_url = server_url.rstrip('/')
        self.username = username
        self.app_password = app_password
        self.session = requests.Session()
        self.session.auth = (username, app_password)
        self.session.headers.update({
            'OCS-APIRequest': 'true',
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        })
        self.rooms = {}
        self.last_message_id = {}
        
    def get_rooms(self):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫—ñ–º–Ω–∞—Ç"""
        url = f"{self.server_url}/ocs/v2.php/apps/spreed/api/v4/room"
        try:
            response = self.session.get(url)
            if response.status_code == 200:
                data = response.json()
                rooms = {}
                for room in data['ocs']['data']:
                    rooms[room['token']] = {
                        'name': room['displayName'],
                        'id': room['id']
                    }
                self.rooms = rooms
                return rooms
            else:
                print(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–º–Ω–∞—Ç: {response.status_code}")
                print(response.text)
                return {}
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {e}")
            return {}
    
    def find_room_by_name(self, room_name):
        """–ó–Ω–∞–π—Ç–∏ –∫—ñ–º–Ω–∞—Ç—É –∑–∞ –Ω–∞–∑–≤–æ—é"""
        for token, room_info in self.rooms.items():
            if room_info['name'].lower() == room_name.lower():
                return token
        return None
    
    def get_messages(self, room_token, limit=50):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫—ñ–º–Ω–∞—Ç–∏"""
        url = f"{self.server_url}/ocs/v2.php/apps/spreed/api/v1/chat/{room_token}"
        params = {
            'lookIntoFuture': 0,
            'limit': limit,
            'includeLastKnown': 1
        }
        
        try:
            response = self.session.get(url, params=params)
            if response.status_code == 200:
                data = response.json()
                return data['ocs']['data']
            else:
                print(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {response.status_code}")
                return []
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞: {e}")
            return []
    
    def send_message(self, room_token, message):
        """–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫—ñ–º–Ω–∞—Ç—É"""
        url = f"{self.server_url}/ocs/v2.php/apps/spreed/api/v1/chat/{room_token}"
        data = {
            'message': message,
            'referenceId': hashlib.sha256(f"{message}{time.time()}".encode()).hexdigest()
        }
        
        try:
            response = self.session.post(url, json=data)
            if response.status_code == 201:
                print(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: {message}")
                return True
            else:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è: {response.status_code}")
                print(response.text)
                return False
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
            return False
    
    def get_tascombank_news(self, limit=5):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏ –∑ —Å–∞–π—Ç—É –¢–ê–°–ö–û–ú–ë–ê–ù–ö–£"""
        try:
            url = "https://tascombank.ua/news"
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.text, 'html.parser')
            news_items = soup.select('.grid__col.grid__col--6-of-12')
            
            news_list = []
            for item in news_items[:limit]:
                title = item.select_one('.header-imp-news').get_text(strip=True)
                link = "https://tascombank.ua" + item.find('a')['href']
                image = "https://tascombank.ua" + item.find('img')['src'] if item.find('img') else None
                
                news_list.append({
                    'title': title,
                    'link': link,
                    'image': image
                })
            
            return news_list
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω: {e}")
            return []
    
    def get_exchange_rates(self):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç –¢–ê–°–ö–û–ú–ë–ê–ù–ö–£"""
        try:
            url = "https://tascombank.ua/api/currencies"
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            
            data = response.json()
            
            # –û—Å–Ω–æ–≤–Ω—ñ –≤–∞–ª—é—Ç–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            main_currencies = ['USD', 'EUR', 'PLN']
            rates = []
            
            # –û–±—Ä–æ–±–ª—è—î–º–æ –ø–µ—Ä—à–∏–π –º–∞—Å–∏–≤ –∑ –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç
            for currency in data[0]:
                if currency['short_name'] in main_currencies and currency['kurs_type'] == 'exchange':
                    rates.append({
                        'currency': currency['short_name'],
                        'buy': float(currency['kurs_buy']),
                        'sale': float(currency['kurs_sale']),
                        'type': currency['kurs_type_description']
                    })
            
            # –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ñ—Å—Ç—é
            ordered_rates = []
            for code in main_currencies:
                for rate in rates:
                    if rate['currency'] == code:
                        ordered_rates.append(rate)
                        break
            
            return ordered_rates
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫—É—Ä—Å—ñ–≤ –≤–∞–ª—é—Ç: {e}")
            return []
    
    def format_news_message(self, news_list):
        """–§–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–∏–Ω —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —á–∞—Ç—É"""
        if not news_list:
            return "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–≤–∏–Ω–∏"
        
        message = "üì∞ **–û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏ –¢–ê–°–ö–û–ú–ë–ê–ù–ö–£:**\n\n"
        for i, news in enumerate(news_list, 1):
            message += f"{i}. [{news['title']}]({news['link']})\n"
        
        message += "\n‚ÑπÔ∏è –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ: https://tascombank.ua/news"
        return message
    
    def format_exchange_rates_message(self, rates):
        """–§–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —á–∞—Ç—É"""
        if not rates:
            return "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç"
        
        message = "üí± **–ö—É—Ä—Å–∏ –≤–∞–ª—é—Ç –¢–ê–°–ö–û–ú–ë–ê–ù–ö–£ (–û–±–º—ñ–Ω–Ω–∏–π):**\n\n"
        message += "| –í–∞–ª—é—Ç–∞ | –ö—É–ø—ñ–≤–ª—è | –ü—Ä–æ–¥–∞–∂ |\n"
        message += "|--------|---------|--------|\n"
        
        for rate in rates:
            message += f"| {rate['currency']} | {rate['buy']:.2f} | {rate['sale']:.2f} |\n"
        
        message += "\n‚ÑπÔ∏è –û—Ñ—ñ—Ü—ñ–π–Ω–∏–π –∫—É—Ä—Å –ù–ë–£: https://bank.gov.ua"
        message += "\nüîÑ –î–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ: " + datetime.now().strftime("%H:%M %d.%m.%Y")
        return message
    
    def process_command(self, message):
        """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥"""
        message = message.strip()
        
        if message == '/help':
            return """ü§ñ **–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:**
            ‚Ä¢ `/help` - –ø–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –º–µ–Ω—é
            ‚Ä¢ `/time` - –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å
            ‚Ä¢ `/echo [—Ç–µ–∫—Å—Ç]` - –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ —Ç–µ–∫—Å—Ç
            ‚Ä¢ `/hello` - –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
            ‚Ä¢ `/info` - —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞
            ‚Ä¢ `/news` - –æ—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏ –¢–ê–°–ö–û–ú–ë–ê–ù–ö–£
            ‚Ä¢ `/rates` - –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç –¢–ê–°–ö–û–ú–ë–ê–ù–ö–£"""
        
        elif message == '/time':
            current_time = datetime.now().strftime("%H:%M:%S %d.%m.%Y")
            return f"üïê **–ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å:** {current_time}"
        
        elif message.startswith('/echo '):
            text_to_echo = message[6:]  # –í–∏–¥–∞–ª—è—î–º–æ '/echo '
            if text_to_echo:
                return f"üì¢ **Echo:** {text_to_echo}"
            else:
                return "‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: `/echo [–≤–∞—à —Ç–µ–∫—Å—Ç]`"
        
        elif message == '/hello':
            return "üëã **–ü—Ä–∏–≤—ñ—Ç!** –Ø –±–æ—Ç –¥–ª—è Nextcloud Talk. –í–≤–µ–¥—ñ—Ç—å `/help` –¥–ª—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥."
        
        elif message == '/info':
            return """‚ÑπÔ∏è **–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞:**
            ‚Ä¢ –í–µ—Ä—Å—ñ—è: 1.2
            ‚Ä¢ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Nextcloud Talk
            ‚Ä¢ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∏–π ‚úÖ
            ‚Ä¢ –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:
              - –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω –¢–ê–°–ö–û–ú–ë–ê–ù–ö–£
              - –ü–µ—Ä–µ–≥–ª—è–¥ –∫—É—Ä—Å—ñ–≤ –≤–∞–ª—é—Ç"""
        
        elif message == '/news':
            news = self.get_tascombank_news(limit=5)
            return self.format_news_message(news)
        
        elif message == '/rates':
            rates = self.get_exchange_rates()
            return self.format_exchange_rates_message(rates)
        
        else:
            return None  # –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞
    
    def monitor_room(self, room_name):
        """–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∫—ñ–º–Ω–∞—Ç–∏ —Ç–∞ –æ–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥"""
        print(f"üîç –ü–æ—à—É–∫ –∫—ñ–º–Ω–∞—Ç–∏ '{room_name}'...")
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –∫—ñ–º–Ω–∞—Ç
        rooms = self.get_rooms()
        if not rooms:
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫—ñ–º–Ω–∞—Ç")
            return
        
        print(f"üìã –ó–Ω–∞–π–¥–µ–Ω–æ –∫—ñ–º–Ω–∞—Ç: {len(rooms)}")
        for token, info in rooms.items():
            print(f"  ‚Ä¢ {info['name']} (ID: {info['id']})")
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ—Ç—Ä—ñ–±–Ω—É –∫—ñ–º–Ω–∞—Ç—É
        room_token = self.find_room_by_name(room_name)
        if not room_token:
            print(f"‚ùå –ö—ñ–º–Ω–∞—Ç—É '{room_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return
        
        print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∫—ñ–º–Ω–∞—Ç—É: {room_name}")
        print(f"üöÄ –ü–æ—á–∏–Ω–∞—é –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∫—ñ–º–Ω–∞—Ç–∏...")
        print("üí¨ –ù–∞–ø–∏—à—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ —á–∞—Ç—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: /help)")
        print("‚èπÔ∏è  –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C –¥–ª—è –∑—É–ø–∏–Ω–∫–∏\n")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        initial_messages = self.get_messages(room_token, limit=5)
        if initial_messages:
            self.last_message_id[room_token] = initial_messages[0]['id']
        
        try:
            while True:
                # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                messages = self.get_messages(room_token, limit=10)
                
                # –û–±—Ä–æ–±–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ –Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                new_messages = []
                if room_token in self.last_message_id:
                    for msg in messages:
                        if msg['id'] > self.last_message_id[room_token]:
                            new_messages.append(msg)
                else:
                    new_messages = messages[:1] if messages else []
                
                # –û–Ω–æ–≤–ª—é—î–º–æ ID –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                if messages:
                    self.last_message_id[room_token] = messages[0]['id']
                
                # –û–±—Ä–æ–±–ª—è—î–º–æ –Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                for message in reversed(new_messages):  # –û–±—Ä–æ–±–ª—è—î–º–æ –≤—ñ–¥ —Å—Ç–∞—Ä—à–∏—Ö –¥–æ –Ω–æ–≤—ñ—à–∏—Ö
                    if message['actorType'] == 'users' and message['actorId'] == self.username:
                        msg_text = message['message']
                        print(f"üì® –û—Ç—Ä–∏–º–∞–Ω–æ: {msg_text}")
                        
                        # –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–º–∞–Ω–¥—É
                        if msg_text.startswith('/'):
                            response = self.process_command(msg_text)
                            if response:
                                self.send_message(room_token, response)
                            else:
                                self.send_message(room_token, f"‚ùì –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: `{msg_text}`. –í–≤–µ–¥—ñ—Ç—å `/help` –¥–ª—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥.")
                
                # –ó–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é
                time.sleep(2)
                
        except KeyboardInterrupt:
            print("\nüõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        except Exception as e:
            print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

def main():
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    print("ü§ñ Nextcloud Talk Bot")
    print("=" * 30)
    
    SERVER_URL = "https://cloud.tascombank.ua"
    USERNAME = input("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à username: ").strip()
    APP_PASSWORD = input("–í–≤–µ–¥—ñ—Ç—å App Password: ").strip()
    ROOM_NAME = input("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫—ñ–º–Ω–∞—Ç–∏ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 'test-bot'): ").strip() or "test-bot"
    
    print(f"\nüîó –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ {SERVER_URL}")
    print(f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {USERNAME}")
    print(f"üè† –ö—ñ–º–Ω–∞—Ç–∞: {ROOM_NAME}")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    bot = NextcloudTalkBot(SERVER_URL, USERNAME, APP_PASSWORD)
    bot.monitor_room(ROOM_NAME)

if __name__ == "__main__":
    main()